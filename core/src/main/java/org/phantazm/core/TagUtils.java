package org.phantazm.core;

import net.minestom.server.entity.Entity;
import net.minestom.server.entity.Player;
import net.minestom.server.tag.TagHandler;
import org.jetbrains.annotations.NotNull;

import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import net.minestom.server.tag.Tag;
import org.phantazm.core.scene2.Scene;
import org.phantazm.core.scene2.SceneManager;

public final class TagUtils {
    private static final AtomicLong TAG_INDEX = new AtomicLong();

    /**
     * Generates a minimal, unique name intended for use in creating {@link Tag} instances. This is useful in situations
     * where it is desirable to have per-object Tags that are guaranteed to be unique to any other names generated by
     * this method, but are not required to be human-readable.
     * <p>
     * This method is unconditionally thread-safe.
     *
     * @return a unique tag name
     */
    public static @NotNull String uniqueTagName() {
        return Long.toString(TAG_INDEX.getAndIncrement(), Character.MAX_RADIX);
    }

    public static @NotNull Optional<TagHandler> sceneLocalTags(@NotNull Entity entity,
        @NotNull Class<? extends Scene> sceneType) {
        if (entity instanceof Player player) {
            return SceneManager.Global.instance().currentScene(player, sceneType).map(scene -> scene.playerTags(player));
        }

        return Optional.of(entity.tagHandler());
    }

    public static @NotNull Optional<TagHandler> sceneLocalTags(@NotNull Entity entity) {
        if (entity instanceof Player player) {
            return SceneManager.Global.instance().currentScene(player)
                .map(scene -> scene.playerTags(player.getUuid()));
        }

        return Optional.of(entity.tagHandler());
    }

    public static @NotNull TagHandler sceneLocalTags(@NotNull Entity entity, @NotNull Scene scene) {
        if (entity instanceof Player player) {
            return scene.playerTags(player);
        }

        return entity.tagHandler();
    }

    public static void removeSceneLocalTag(@NotNull Entity entity, @NotNull Scene scene, @NotNull Tag<?> tag) {
        if (entity instanceof Player player) {
            scene.playerTags(player).removeTag(tag);
        }

        entity.removeTag(tag);
    }

    public static <T> void setSceneLocalTag(@NotNull Entity entity, @NotNull Scene scene, @NotNull Tag<T> tag, T value) {
        if (entity instanceof Player player) {
            scene.playerTags(player).setTag(tag, value);
        }

        entity.setTag(tag, value);
    }
}
